{"ast":null,"code":"var _jsxFileName = \"/Users/dulceramirez/Documents/Laboratoria/MovieChallenge/DEV009-movie-challenge-fw-new/src/components/OrderBy/OrderByGenre.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport '../../styles/OrderByGenre.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const OrderByGenre = ({\n  setPeliculas,\n  setTotalPages,\n  currentPage,\n  setCurrentPage\n}) => {\n  _s();\n  // ... (resto de tu código)\n  const BASE_URL = 'https://api.themoviedb.org/3';\n  const API_KEY = '03d8479e6ac8e870c3ef0fea7b1b15c3';\n  const [genres, setGenres] = useState([]);\n  const [selectedGenre, setSelectedGenre] = useState(\"\");\n  useEffect(() => {\n    const fetchGenres = async () => {\n      try {\n        const response = await fetch(`${BASE_URL}/genre/movie/list?api_key=${API_KEY}`);\n        const data = await response.json();\n        setGenres(data.genres);\n      } catch (error) {\n        console.error(\"Error fetching genres\", error);\n      }\n    };\n    fetchGenres();\n  }, []);\n  const handleByChange = async event => {\n    const genre = event.target.value;\n    setSelectedGenre(genre);\n    setCurrentPage(1); // Reiniciar la paginación\n  };\n\n  useEffect(() => {\n    if (selectedGenre) {\n      // Realiza la llamada a la API si hay un género seleccionado\n      const fetchMoviesByGenre = async () => {\n        try {\n          const response = await fetch(`${BASE_URL}/discover/movie?with_genres=${selectedGenre}&api_key=${API_KEY}&page=${currentPage}`);\n          const data = await response.json();\n          setPeliculas(data.results);\n          setTotalPages(data.total_pages);\n        } catch (error) {\n          console.error(\"Error fetching movies by genre:\", error);\n        }\n      };\n      fetchMoviesByGenre();\n    }\n  }, [currentPage, selectedGenre]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"orderByGenre\",\n      children: \"Order by Genre \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      id: \"orderByGenre\",\n      onChange: handleByChange,\n      children: genres.map(genre => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: genre.id,\n        children: genre.name\n      }, genre.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n_s(OrderByGenre, \"2+rEZM9OvPJosrjwCfsHjm1Ci5k=\");\n_c = OrderByGenre;\nvar _c;\n$RefreshReg$(_c, \"OrderByGenre\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","OrderByGenre","setPeliculas","setTotalPages","currentPage","setCurrentPage","_s","BASE_URL","API_KEY","genres","setGenres","selectedGenre","setSelectedGenre","fetchGenres","response","fetch","data","json","error","console","handleByChange","event","genre","target","value","fetchMoviesByGenre","results","total_pages","className","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","id","onChange","map","name","_c","$RefreshReg$"],"sources":["/Users/dulceramirez/Documents/Laboratoria/MovieChallenge/DEV009-movie-challenge-fw-new/src/components/OrderBy/OrderByGenre.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport '../../styles/OrderByGenre.css';\n\ntype Movie = {\n  id:number;\n  title: string;\n  release_date: string;\n  poster_path: string;\n  overview: string;\n};\n\ntype Genre = {\n  id: number;\n  name: string;\n};\n\ntype Props = {\n  setPeliculas: React.Dispatch<React.SetStateAction<Movie[]>>;\n  currentPage: number;\n}\n\nexport const OrderByGenre: React.FC<{\n  setPeliculas: React.Dispatch<React.SetStateAction<Movie[]>>,\n  setTotalPages: React.Dispatch<React.SetStateAction<number>>,\n  currentPage: number \n  setCurrentPage: React.Dispatch<React.SetStateAction<number>>\n}> = ({ setPeliculas, setTotalPages, currentPage, setCurrentPage  }) => {\n// ... (resto de tu código)\n  const BASE_URL = 'https://api.themoviedb.org/3';\n  const API_KEY = '03d8479e6ac8e870c3ef0fea7b1b15c3';\n\n  const [genres, setGenres] = useState<Genre[]>([]);\n  const [selectedGenre, setSelectedGenre] = useState<string>(\"\");\n\n  useEffect(() => {\n    const fetchGenres = async () => {\n      try {\n        const response = await fetch(`${BASE_URL}/genre/movie/list?api_key=${API_KEY}`);\n        const data = await response.json();\n        setGenres(data.genres);\n      } catch (error) {\n        console.error(\"Error fetching genres\", error);\n      }\n    };\n\n    fetchGenres();\n  }, []);\n\n  const handleByChange = async (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const genre = event.target.value;\n    setSelectedGenre(genre);\n    setCurrentPage(1);  // Reiniciar la paginación\n};\n\n  useEffect(() => {\n    if (selectedGenre) {\n      // Realiza la llamada a la API si hay un género seleccionado\n      const fetchMoviesByGenre = async () => {\n        try {\n          const response = await fetch(`${BASE_URL}/discover/movie?with_genres=${selectedGenre}&api_key=${API_KEY}&page=${currentPage}`);\n          const data = await response.json();\n          setPeliculas(data.results);\n          setTotalPages(data.total_pages);\n        } catch (error) {\n          console.error(\"Error fetching movies by genre:\", error);\n        }\n      };\n      fetchMoviesByGenre();\n    }\n  }, [currentPage, selectedGenre]);\n\n  return (\n    <div className='container'>\n      <label htmlFor='orderByGenre'>Order by Genre </label>\n      <select id='orderByGenre' onChange={handleByChange}>\n        {genres.map((genre: Genre) => (\n          <option key={genre.id} value={genre.id}>\n            {genre.name}\n          </option>\n        ))}\n      </select>\n    </div>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}